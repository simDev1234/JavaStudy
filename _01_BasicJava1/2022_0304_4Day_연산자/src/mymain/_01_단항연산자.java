package mymain;

public class _01_단항연산자 {

	public static void main(String[] args) {
		
		//1. 단항연산자 : ~, !, ++, --, (cast), -(부호)
		
		//(1) ~ (tilde) : 이진 논리 Not 연산자 (1의 보수)
		int n = 10; 
		System.out.printf("[%32s]\n",Integer.toBinaryString(n));
		System.out.printf("[%32s]\n",Integer.toBinaryString(~n));
		
		//---------------------------------------------------------
		
		//(2) ! : 일반논리 Not연산자
		boolean bOk = !(3>2); //boolean bOk = !3>2; 는 불가 why? 일반논리일 경우에만 !사용 가능
		                      //(3>2) == true
		System.out.printf("!(3>2) : %b\n",bOk);
		System.out.printf("!true : %b\n",!true);
		
		//---------------------------------------------------------
		
		//(3) ++(증가), --(감소) : 증감 연산자
		// ++변수 : 전위형
		// 변수++ : 후위형
		
		int a = 10;
		// 증가 : 자신의 값을 1씩 증가
		a++; // a = a + 1;
		System.out.printf("a : %d\n",a);
		// 감소 : 자신의 값을 1씩 감소
		a--; // a = a - 1;
		System.out.printf("a : %d\n",a);
		
		//복합연산에서 전(후)위형 연산자의 의미
		int x = 10;
		int y = 5;
		int z;
		
		z = ++x + y--; //전위형 (++x) : 모든 연산에 앞서 먼저 연산 
		               //후위형 (y--) : 모든 연산이 종료가 된 후 제일 마지막에 연산
		               //연산 순서 
		                 //1) ++x
		                 //2) z = x + y
		                 //3) y--
		System.out.printf("x = %d, y = %d, z = %d\n",x,y,z);
		
		x = 10;
		y = 5;
		System.out.printf("++x=%d, y++=%d\n", ++x, y++); //y++는 모든 명령이 끝난 다음에 +1이 됨
		                                                 //y값이 y++=%d 에서 %d에게 전달된 후, 다 완료되면 +1
		System.out.printf("y=%d\n",y);
		
		//---------------------------------------------------------
		
		//(4) -(부호) : 
		x = -10; // (-1) * 10
		y = -x;  //     -(-10)
		
		System.out.printf("|%d| = %d\n",x,y);
		
		//---------------------------------------------------------
		
		//(5) 강제 형변환 연산자 : cast 연산자
		//형식 ) (자료형) 값
		/*
		   자료형변환(Data Conversion) 
		   1. 자동형변환(묵시적 형변환) : 프로모션(더 큰 자료형으로의 자동 변환)
		     1) 연산시 : 자료형이 큰 쪽으로 변환 
		               1.0 + 1   -> double형 + int형
		               1.0 + 1.0 -> [자동형변환] double형 + double형 //java가 묵시적으로 자동형변환해줌
		                                                        //(자동형변을 하면 안 할 때보다 산술연산 시 속도가 느림)
		     2) 대입시(=치환시) : 좌변항으로 형변환(단, 좌변항이 크거나 같은 경우) 
		        int a = 10; //초기화 : 변수 선언과 동시에 값을 넣는 경우
		        // 대입
		        좌변항 = 우변항
		          a  = 100; 
		        
		   2. 강제형변환(명시적 형변환) : 디모션(더 작은 자료형으로의 변환/ 정보 손실 가능성)
		 */
		//대입시 형변환(자동형변환)
		double d;
		//좌 = 우
		d = 10; //1) 10 -> 10.0 (int -> double)
	    
		//강제형변환 : 
		float f;
		//float = double
		      f = (float)1.0; //실제로는 double형이지만 계산을 위해 임시로 float(1.0f)으로 형변환
		
//----------------------------------------------------------------------
	}

}
